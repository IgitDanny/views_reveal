<?php
/**
 * @file
 * Integrates Views with Reveal.js.
 */

/**
 * Implements hook_views_api().
 */
function views_reveal_views_api() {
  $inc = drupal_get_path('module', 'views_reveal') . '/inc';

  return array(
    'api' => 3.0,
    'path' => $inc,
    'template path' => $inc,
  );
}

/**
 * Implements hook_libraries_info().
 */
function views_reveal_libraries_info() {
  $libraries = array();
  $libraries['reveal'] = array(
    'name' => 'RevealJS',
    'vendor url' => 'http://lab.hakim.se/reveal-js/',
    'download url' => 'https://github.com/hakimel/reveal.js',
    'version callback' => 'views_reveal_version',
    'files' => array(
      'js' => array(
        'lib/js/head.min.js',
        'js/reveal.min.js',
      ),
      'css' => array(
        'css/reveal.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Versioning info for library.
 */
function views_reveal_version($library) {
  return '2.6.2';
}

/**
 * Implements hook_theme().
 */
function views_reveal_theme($existing, $type, $theme, $path) {
  $themes['views_reveal'] = array(
    'base hook' => 'page',
    'render element' => 'page',
    'template' => 'inc/page--reveal',
    'override preprocess functions' => TRUE,
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_page',
      'template_preprocess_views_view_reveal',
    ),
  );

  return $themes;
}

/**
 * Implements hook_theme_preprocess_page().
 */
function views_reveal_preprocess_page(&$vars) {
  $view = views_get_page_view();
  if (!empty($view)) {
    if ($view->style_plugin->plugin_name === 'reveal') {
      $vars['theme_hook_suggestions'][] = 'views_reveal';
    }
  }
}

/**
 * Template function for views_reveal style plugin.
 *
 * @param array $vars
 *   Array of template variables.
 */
function template_preprocess_views_view_reveal(array &$vars) {
  // Script/styles break Views UI- don't add to admin pages.
  if (!strstr($_GET['q'], 'admin')) {
    /**/
    $view = $vars['view'];
    $mod = drupal_get_path('module', 'views_reveal');
    $lib = libraries_get_path('reveal');
    $settings = views_reveal_get_settings($view->style_plugin->options);
    /**/
    // Load library js & css.
    libraries_load('reveal');
    // Add library path for async loading.
    $settings['lib'] = $GLOBALS['base_path'] . $lib;
    // Add module js settings.
    drupal_add_js(array('views_reveal' => views_reveal_json_encode($settings)), array('type' => 'setting'));
    // Add module js.
    drupal_add_js($mod . '/js/views_reveal.js', array(
      'type' => 'file',
      'scope' => JS_DEFAULT,
      'weight' => 1,
    ));
    if (!empty($settings['theme'])) {
      // Add presentation theme stylesheet.
      drupal_add_css($lib . '/css/theme/' . $settings['theme'] . '.css', array(
        'type' => 'file',
        'scope' => CSS_DEFAULT,
        'weight' => 0,
      ));
    }
    // drupal_set_message(views_reveal_json_encode($settings));
  }
}

/**
 * Configure plugin settings for js and flatten array.
 */
function views_reveal_get_settings($array) {
  $options = array();
  foreach ($array as $key => $val) {
    if (!is_array($val)) {
      if ($val === "0" || $val === "1") {
        $options[$key] = !!$val;
      }
      else {
        $options[$key] = $val;
      }
    }
    else {
      $options = array_merge($options, views_reveal_get_settings($val));
    }
  }

  return $options;
}

/**
 * Format json.
 */
function views_reveal_json_encode($settings) {

  $json = json_encode($settings, JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK);

  return $json;
}

/**
 * Implements hook_help().
 */
function views_reveal_help($path, $arg) {
  $output = '';
  switch ($path) {

    case 'admin/help#views_reveal':
      $output .= '<p>' . t('The Views Reveal module provides the ability to create Reveal.js presentations using fields from Views.') . '</p>';
      $output .= '<h2>' . t('Views integration') . '</h2>';
      $output .= '<p>';
      $output .= t('Configuration options for Views Reveal are accessible through Views Format Settings. ');

      if (module_exists('views_ui')) {
        $output .= t('You may configure a new view through the <a href="!views-url">Views module interface</a>. After adding a new view, change the format of the display style to "Reveal Presentation" and configure the Settings.');
      }
      else {
        $output .= t('This site not have Views (or the Views UI module) installed currently. You may be able to turn on this module under your site\'s <a href="!modules-url">module page</a>, or you may have to <a href="http://drupal.org/project/views">download Views module</a> and install it.', array('!modules-url' => url('admin/modules')));
      }
      $output .= '</p>';

      return $output;
  }
}
